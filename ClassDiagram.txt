@startuml
interface "Runnable" as Runnable
interface "List" as List

interface Runnable {
	+run() : void
}
class Number {
	- Integer value
	- boolean isPrime = false
	# Number(Integer)
	# getValue() : Integer
	# setValue(Integer) : void
	# getPrime() : void
	# setPrime(boolean) : void
	# isPrime() : boolean
}
class Queue {
	- {static} final long serialVersionUID = 1L
	+ {static} final int WAIT_TIME = 50
	- {static} final int MAX_PRIME_NUMBER = 10000
	- {static} final int MAX_QUEUE_SIZE = 100000
	- int readCursor = 0
	- int writeCursor = 0
	- Object queueLock = new Object()
	- int numberOfPrimeNumbersWanted
	- int primeNumbersFound = 0
	- {static} Queue queue = null
	- Queue(int) : Queue
	+ {static} getQueue(int) : Queue
	- getReadCursor() : int
	- incrementReadCursor() : void
	- getWriteCursor() : int
	- incrementWriteCursor() : void
	- getNumberOfPrimeNumbersWanted() : int
	- getPrimeNumbersFound() : int
	- incrementPrimeNumbersFound() : void
	- isValidNumberOfPrimeNumbers(int) : boolean
	- isReadable() : boolean
	- isWritable() : boolean
	- primeNumbersFound() : boolean
	# read() : Number
	# write() : void 
}

abstract class Worker {
	- Queue queue
	# Worker(Queue) : Worker
	# getQueue() : Queue
	- setQueue(Queue) : void
}

class Consumer {
	+ Consumer(Queue) : Consumer
	- consume() : void
	+ run() : void
}

class Producer {
	+ Producer(Queue) : Producer
	- produce() : void
	+ run() : void()
}

List <|.. ArrayList
ArrayList <|-- Queue
Number *-- Queue : uses
Queue *-- Worker
Runnable <|.. Consumer
Runnable <|.. Producer
Worker <|-- Consumer
Worker <|-- Producer


@enduml
